# A class that manages ID numbers for Python values. ID numbers are non-
# negative integers that identify the members of some largely arbitrary set of
# values (the values just have to be hashable so I can make a dictionary from
# them). ID managers keep track of the mapping from values to ID numbers, and
# can generate new ID numbers as new values need them.

# Copyright (C) 2023 by Doug Baldwin (baldwin@geneseo.edu).
# This work is licensed under a Creative Commons Attribution 4.0 International
# License (http://creativecommons.org/licenses/by/4.0/).

# History:
#
#   August 2023 -- Created by Doug Baldwin.




class IDManager :




    # ID managers use the following attributes to manage IDs:
    #   - idTable, a dictionary that maps whatever values this manager tracks
    #     to their ID numbers.
    #   - nextID, an integer that keeps track of the next ID number to use.




    # Initialize an ID manager to have no values tracked.

    def __init__( self ) :
        self.idTable = {}
        self.nextID = 0




    # Check to see if this ID manager has an ID for a given value, returning
    # True if so and False otherwise.

    def contains( self, value ) :
        return value in self.idTable




    # Look up the ID associated with a value, returning the ID, or None if this
    # ID manager doesn't know about the value.

    def find( self, value ) :
        try :
            return self.idTable[ value ]
        except KeyError :
            return None




    # Advance this ID manager's "next ID" counter, and return its old value
    # (thus returning a value that can be used as an ID for a new value).

    def next( self ) :
        oldID = self.nextID
        self.nextID += 1
        return oldID




    # Store a new value in this ID manager. The client provides the ID number
    # for the value, although it ought to have been generated by "next."

    def store( self, value, id ) :
        self.idTable[value] = id
